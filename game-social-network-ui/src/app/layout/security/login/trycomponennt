import { Component } from '@angular/core';
import { AuthenticationRequest} from "../../../services/models/authentication-request";
import {NgForOf, NgIf} from "@angular/common";
import {AbstractControl, FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators} from "@angular/forms";
import {Router} from "@angular/router";
import {AuthenticationService} from "../../../services/services/authentication.service";
import { TokenService} from "../../../services/token/token.service";

 function passwordsMatch(control: AbstractControl) {
   const password = control.get('password')?.value;
   const confirmPassword = control.get('confirmPassword')?.value;
   if (password && confirmPassword && password !== confirmPassword) {
     return { passwordMismatch : true }
   }
   return null;
 }

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [
    NgIf,
    NgForOf,
    FormsModule,
    ReactiveFormsModule
  ],
  templateUrl: './login.component.html',
  styleUrl: './login.component.scss'
})
export class LoginComponent {

  authRequest: AuthenticationRequest = {email: '', password: ''};
  errorMsg: Array<string> = [];

  constructor(
    private router: Router,
    private authService: AuthenticationService,
    private tokenService: TokenService
  ) {}

  login() {
    this.errorMsg = [];
    this.authService.authenticate({
      body: this.authRequest
    }).subscribe({
      next: (res) => {
        this.tokenService.token = res.token as string;
        this.router.navigate(['post']);
      },
      error: (err) => {
        console.log(err);
        if (err.error.validationErrors) {
          this.errorMsg = err.error.validationErrors;
        } else {
          this.errorMsg.push(err.error.errorMsg);
        }
      }
    });
  }



  form = new FormGroup({
    email: new FormControl('', {
      validators: [ Validators.email, Validators.required],
    }),
    password: new FormControl('', {
      validators: [Validators.maxLength(20),
                    Validators.min(8),
                    Validators.required]
    }),
    confirmPassword: new FormControl('',  {
      validators: [passwordsMatch, Validators.required]
    }),
  });


  get emailIsInvalid() {
    return (
      this.form.controls.email.touched &&
      this.form.controls.email.dirty &&
      this.form.controls.email.invalid
    );
  }

  get passwordIsInvalid() {
    return (
      this.form.controls.password.touched &&
      this.form.controls.password.dirty &&
      this.form.controls.password.invalid
    );
  }

  get passwordNotMatch() {
    return (
      this.form.controls.confirmPassword.touched &&
      this.form.controls.confirmPassword.dirty &&
      this.form.controls.confirmPassword.invalid
    );
  }

  onSubmit = () => {
    console.log(this.form);
  }

  register() {
    this.router.navigate(['register']);
  }
}



